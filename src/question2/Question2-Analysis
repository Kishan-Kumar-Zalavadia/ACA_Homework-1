Question-2:
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
a. Describe an algorithm in pseudocode, with comments how to find the median.
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________Algorithm: Find Median

Input:
- A list of numbers, `numbers`, of length `n`.

Output:
- The median of the input list.

Pseudocode:
1. Sort the list `numbers` in ascending order.

2. If `n` is odd (i.e., `n` modulo 2 is 1):
   a. Return the middle element of the sorted list:
      i. Set `middle_index` to `n / 2`.
      ii. Return `numbers[middle_index]`.

3. If `n` is even (i.e., `n` modulo 2 is 0):
   a. Return the average of the two middle elements of the sorted list:
      i. Set `middle_index1` to `n / 2 - 1`.
      ii. Set `middle_index2` to `n / 2`.
      iii. Calculate the average as `average = (numbers[middle_index1] + numbers[middle_index2]) / 2.0`.
      iv. Return `average`.

4. The median of the list has been calculated and returned.

Example:
Let's say `numbers = [5, 2, 9, 1, 5]`, which has `n = 5` elements.
- After sorting, `numbers` becomes `[1, 2, 5, 5, 9]`.
- Since `n` is odd, we return the middle element, which is `5`.

For `numbers = [3, 1, 4, 1, 5, 9, 2, 6]`, which has `n = 8` elements:
- After sorting, `numbers` becomes `[1, 1, 2, 3, 4, 5, 6, 9]`.
- Since `n` is even, we calculate the average of the two middle elements:
  - `middle_index1 = 7 / 2 - 1 = 3`
  - `middle_index2 = 7 / 2 = 4`
  - The average is `(numbers[3] + numbers[4]) / 2.0 = (3 + 4) / 2.0 = 3.5`.

So, the algorithm calculates the median based on the evenness or oddness of the number of elements in the list and returns the appropriate result.





_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________b. Given there are N schools with x1,x2,x3,..., xn students respectively, what is the
   complexity of your algorithm
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
The time complexity of the code for merging arrays of sizes x1, x2, x3, ..., xn is O(N * (x1 + x2 + x3 + ... + xn)), where N is the number of arrays.





_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
**Reference**
- https://www.codingninjas.com/studio/online-compiler/online-cpp-compiler
- ChatGPT -> For Quick Snippets





_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Code Explanation:
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________
Certainly, let's provide a detailed explanation of the code you provided. The code is designed to merge N sorted arrays (represented as lists) into a single sorted list and then find the median of that merged list. Here's a step-by-step explanation:

### Merging Sorted Lists

The first part of the code focuses on merging N sorted arrays efficiently.

#### Function: `mergeNSortedArrayLists`

- **Input**: `List<List<Integer>> arrays` - A list of N sorted lists, where each inner list represents a sorted array of integers.
- **Output**: `List<Integer>` - A single sorted list containing all elements from the input lists.

#### Merging Algorithm:

1. Initialize an empty result list `result` that will store the merged elements.

2. Create an array `indices` to keep track of the current position (index) in each input list. Initialize all indices to 0.

3. Create a boolean variable `allListsEmpty` and set it to `false`. This variable will help determine when all input lists are exhausted.

4. Start a timer to measure the runtime.

5. Enter a loop that continues until `allListsEmpty` is `true`, meaning that all input lists have been fully processed.

6. Inside the loop, initialize `minValue` to `Integer.MAX_VALUE` and `minIndex` to -1. These variables will keep track of the smallest value among the heads of the input lists and the index of the list from which the smallest value was taken.

7. Iterate over each input list using a for loop.

8. For each list, check if the corresponding index (`indices[i]`) is within the bounds of the list. If it is, this list is not empty.

9. If the list is not empty, retrieve the value at the current index in that list and compare it to `minValue`. If the current value is smaller, update `minValue` and `minIndex`.

10. After processing all lists, you will have found the smallest value among the heads of the input lists.

11. If `minIndex` is not -1 (meaning a valid minimum value was found), add `minValue` to the `result` list and increment the index for that list (`indices[minIndex]`) to move to the next value in that list.

12. Check if all input lists are empty by inspecting the `allListsEmpty` flag. If any list is not empty, set `allListsEmpty` to `false`.

13. The loop repeats until `allListsEmpty` becomes `true`, at which point all input lists have been fully processed.

14. Stop the timer to measure the runtime.

15. Return the `result` list, which contains all elements from the input lists in sorted order.

### Finding the Median

After merging the input lists, the code proceeds to find the median of the merged list.

#### Function: `findMedian`

- **Input**: `List<Integer> sortedList` - A sorted list of integers.
- **Output**: `double` - The median value of the list.

#### Median Calculation:

1. Calculate the total size of the merged list using `sortedList.size()`.

2. Determine the middle index by dividing the total size by 2.

3. If the total size is even (i.e., `totalSize % 2 == 0`), return the average of the two middle elements. This is done by retrieving the elements at indices `middle - 1` and `middle`, summing them, and dividing by 2.0 to ensure a floating-point result.

4. If the total size is odd, simply return the middle element, which can be obtained using `sortedList.get(middle)`.

### Main Function

The `main` function coordinates the execution of the code.

1. It reads the input data from a file and stores it in a list of lists (`inputSortedList`).

2. The code then merges the input lists using the `mergeNSortedArrayLists` function and measures the runtime for this operation.

3. After merging, it calculates the median using the `findMedian` function and displays both the merged list and the calculated median.

In summary, this code efficiently merges N sorted lists without re-sorting the entire dataset and then calculates the median from the merged list. The result is obtained in a runtime-efficient manner, making it suitable for processing large datasets of sorted lists.
_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________